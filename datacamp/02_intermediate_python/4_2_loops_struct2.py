

import numpy as np
import pandas as pd

# Import cars data
cars = pd.read_csv('cars.csv', index_col = 0)


##----------------------------------##
## Loop over DataFrame : iterrows()
##----------------------------------##

if False:
	# Iterate over rows of cars
	for lab, row in cars.iterrows():
		print (lab)
		print (row)

	# The row data that's generated by iterrows() on every run is a Pandas Series. This format is not very convenient to print out. Luckily, you can easily select variables from the Pandas Series using square brackets:

	# Adapt for loop
	for lab, row in cars.iterrows() :
		print(lab+": "+str(row["cars_per_cap"]))


##----------------------------------##
## Add column (1)
##----------------------------------##

if False:
	# Use a for loop to add a new column, named COUNTRY, that contains a uppercase version of the country names in the "country" column. You can use the string method upper() for this.

	# Code for loop that adds COUNTRY column
	for lab, row in cars.iterrows():
		cars.loc[lab, 'COUNTRY'] = row['country'].upper()

	# Print cars
	print(cars)
	# Great, but you might remember that there is also an easier way to do this.
# Using iterrows() to iterate over every observation of a Pandas DataFrame is easy to understand, but not very efficient. On every iteration, you're creating a new Pandas Series.

if False:
	# If you want to add a column to a DataFrame by calling a function on another column, the iterrows() method in combination with a for loop is not the preferred way to go. Instead, you'll want to use apply()

	# Use .apply(str.upper)
	cars['COUNTRY'] = cars['country'].apply(str.upper)
	print cars
	#  Notice that what inside apply() need to be a function. Here we use function str.upper(), not the method upper()

if False:
	a = 'apichart'
	b = str.upper(a) # use fuction str.upper()
	c = a.upper()	# use string method .upper()
	print b, c



